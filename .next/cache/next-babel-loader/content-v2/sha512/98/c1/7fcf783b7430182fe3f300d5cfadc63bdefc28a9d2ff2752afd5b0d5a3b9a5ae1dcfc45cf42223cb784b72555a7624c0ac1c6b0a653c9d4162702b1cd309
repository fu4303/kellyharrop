{"ast":null,"code":"var _jsxFileName = \"/Users/kharrop/sites/kharrop/website/pages/blog/2021/its-okay-to-be-wrong.mdx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport BlogPost from '../../../components/blogPost';\nexport const meta = {\n  title: \"It's okay to be wrong\",\n  description: 'How wrong decisions can lead to personal and professional growth',\n  date: 'January 11, 2021',\n  readTime: 5\n};\nconst layoutProps = {\n  meta\n};\n\nconst MDXLayout = ({\n  children\n}) => mdx(BlogPost, {\n  meta: meta,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 37\n  }\n}, children);\n\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 10\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, `As kids, we're often punished for not knowing the right answers. Take a look at the SAT - if you answer a question incorrectly, you get more points off than simply not answering at all. Inaction is rewarded over a wrong action when trying to solve a problem.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, `This kind of negative reinforcement can carry over into adulthood where we feel like inaction is a safer option than trying something that could result in a less than ideal outcome.`), mdx(\"h2\", _extends({\n    \"id\": \"working-with-your-partners\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#working-with-your-partners\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 8\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 10\n    }\n  }))), `Working with your partners`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, `In the software industry, the risk of feeling wrong can result in dysfunctional teams and a lack of trust in our business partners, such as:`), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, `Developers not pushing back on design in case they are wrong about what \"good\" design is or don't have all the business context`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, `Designers not asking developers if a design is feasible because it could result in having to rework and already \"approved\" design`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, `Managers worried about not communicating out the right information from their team, which means asking the team to provide that data themselves`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, `QA not wanting to ask what they are testing against because they are worried about being wrong about the acceptance criteria`)), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, `We need to be asking ourselves: how can we encourage more collaboration and questions, no matter what role or level of experience? By feeling free to admit `, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 168\n    }\n  }, `publicly`), ` when we're wrong, and more importantly... that it's okay.`), mdx(\"h2\", _extends({\n    \"id\": \"growth-through-shame\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#growth-through-shame\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 8\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 10\n    }\n  }))), `Growth through shame`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, `When we're wrong, we feel ashamed. Our natural instinct is to not repeat the same mistake. The easiest way to protect ourselves is to not even take the risk of being in that situation again. This avoidance tactic tends to backfire though, because the team ends up suffering over all.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, `If we can embrace being wrong though and working past our emotions, we can begin to start to see how we can grow from these experiences.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, `Then next time you feel shame through making a wrong decision, keep in mind:`), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, `Awareness of being wrong is a strength`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, `You don't learn from always being right`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, `Others will also be wrong, and now you have an opportunity to teach!`)), mdx(\"h2\", _extends({\n    \"id\": \"codedesign-reviews\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#codedesign-reviews\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 8\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 10\n    }\n  }))), `Code/design reviews`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, `Providing a constructive review is typically the main way people learn that they didn't do something the right way. We tend to take for granted that \"best practices\" are widely known, but really it depends on how people learned. Consider the following:`), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, `A professor/bootcamp didn't cover this particular topic`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, `Best practices can evolve over time`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, `A previous company did it a certain way`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, `Someone that is self-taught hasn't stumbled across that scenario before`)), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, `When we take into consideration that not everyone has the same traditional \"101\" training, reviews are sometimes the first time someone realizes that their method was incorrect. Providing constructive feedback is not only helpful for the person receiving it, but if done publicly (like a GitHub or Figma comment), it can help others learn the lesson at the same time.`), mdx(\"h2\", _extends({\n    \"id\": \"process--tooling\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#process--tooling\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 8\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 10\n    }\n  }))), `Process & tooling`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, `Depending on the size of your team, sometimes code/design reviews can't be as thorough. That's okay! Teams can still self-improve and learn through following the right processes and tooling.`), mdx(\"h3\", _extends({\n    \"id\": \"linting\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#linting\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 8\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 10\n    }\n  }))), `Linting`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, `Linting is a great way to ensure that code follows consistent standards. I use `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/DavidAnson/vscode-markdownlint\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 91\n    }\n  }), `this markdown linter`), ` to make sure my posts follow consistent rules.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, `It's also super conveninent to highlight:`), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, `CSS standards in terms of white spacing, import order`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, `Unused variables`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, `Outdated concatenation practices`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, `Code formatting issues`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, `And more!`)), mdx(\"h3\", _extends({\n    \"id\": \"design-and-code-libraries\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#design-and-code-libraries\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 8\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 10\n    }\n  }))), `Design and code libraries`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, `Design libraries are a great way to ensure that designs reflect their coded counterpart's limitations. Especially with Figma's newest `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.figma.com/best-practices/creating-and-organizing-variants/\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 146\n    }\n  }), `variant support`), `, it's super convenient for designers to understand what can be modified when referencing a given component.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, `In addition, designers and developers can also reference a coded library version using something like `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://storybook.js.org/\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 114\n    }\n  }), `Storybook`), ` to see how the coded component actually works. It's also a great tool for implementation documentation, understanding how the component changes in different environments, and `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/@vasikarla.raj/storybook-for-native-d772654c7133\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 207\n    }\n  }), `works for native platforms`), ` too!`), mdx(\"h3\", _extends({\n    \"id\": \"reviews-in-github\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#reviews-in-github\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 8\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 10\n    }\n  }))), `Reviews in GitHub`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }\n  }, `The best way to review code, is in the same place the code is. When designers and developers are speaking the same language, it makes it much easier to understand feedback.`), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 27\n    }\n  }, `Before`), `: (Screenshot) THis button text is too dark, should be lighter`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 27\n    }\n  }, `After`), `: (Line 224 comment) Change class to `, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 118\n    }\n  }, `text-gray-300`))), mdx(\"h3\", _extends({\n    \"id\": \"examples-of-clear-objective-feedback\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#examples-of-clear-objective-feedback\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 8\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 10\n    }\n  }))), `Examples of clear, objective feedback`), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, `I noticed you used a lot of `, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 59\n    }\n  }, `!important`), `s in your CSS, but it's important we avoid these because they can cause issues with specificity between our spreadsheets. You can achieve the same type of behavior by using more specific selectors.`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, `I see that you're using the `, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 59\n    }\n  }, `tabs`), ` pattern for navigation on this screen, but our experiences use `, mdx(\"inlineCode\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 176\n    }\n  }, `links`), ` because they are semantically correct as the user is taken to a different page, versus the content updating below.`)), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, `Note that these examples explain `, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 45\n    }\n  }, `why`), ` something is wrong, instead of just explaining what to fix. In doing so, you're not only providing guidance to help others, but also amping up your own credibility.`), mdx(\"h2\", _extends({\n    \"id\": \"moving-forward-through-uncertainty\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#moving-forward-through-uncertainty\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 8\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 10\n    }\n  }))), `Moving forward through uncertainty`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 5\n    }\n  }, `At Amazon, Jeff Bezos talks about the concept of `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.aboutamazon.com/news/company-news/2016-letter-to-shareholders\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 61\n    }\n  }), `Day 1 vs Day 2`), ` companies. One of the main points that stood out is: not everyone needs to agree to move forward, but they can still commit.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }\n  }, `Disagreement doesn't need to result in death (to an idea).`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 5\n    }\n  }, `It's okay to move forward in a direction, even though you may think it's the wrong one. We don't learn unless we try. Whether the experiment is a success or a failure, you're left with a guaranteed reward for the effort: data.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 5\n    }\n  }, `And with that data, we can make informed decisions on what to experiment with next.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }\n  }, `If we can agree to commit to solving the problem, versus having everyone on board with the solution, we can set aside our egos and embrace a more open-minded and customer-focused approach.`), mdx(\"h2\", _extends({\n    \"id\": \"what-helped-me-grow\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 5\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#what-helped-me-grow\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 8\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 10\n    }\n  }))), `What helped me grow`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 5\n    }\n  }, `It's easy to be dismissive of feedback when you think you're always right. What does this person know after all? Doesn't my solution work?`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }\n  }, `Just because something works, doesn't mean it can't be improved. This current website is an example of that - yes it technically functions, but there is so much I want to improve. Cleaner implementations, better crafted components. But how do I know there is even something to improve in the first place?`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 5\n    }\n  }, `By being curious. Getting inspired by others. Exploring outside of my bubble and finding what others with different background have crafted. Diversity is so important, because we don't grow in our own echo chambers.`), mdx(\"h3\", _extends({\n    \"id\": \"questions-i-typically-ask\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 5\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#questions-i-typically-ask\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 8\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 10\n    }\n  }))), `Questions I typically ask`), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }, `How did you know about this approach? (I learn about a new site/resource)`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }\n  }, `What makes this method better than mine? (I learn about limitations and how things work)`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }\n  }, `Since when was this a thing? (I learn if I'm just behind the times, or if I never knew the right approach)`)), mdx(\"h2\", _extends({\n    \"id\": \"wrapping-up\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 5\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#wrapping-up\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 8\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 10\n    }\n  }))), `Wrapping up`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 5\n    }\n  }, `When we start putting down our barriers and start taking constructive feedback as a gift, we can start to grow and learn from our mistakes.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 5\n    }\n  }, `What were you wrong about today? What did you learn?`));\n}\n;\nMDXContent.isMDXComponent = true;","map":{"version":3,"sources":["/Users/kharrop/sites/kharrop/website/pages/blog/2021/its-okay-to-be-wrong.mdx"],"names":["React","mdx","BlogPost","meta","title","description","date","readTime","layoutProps","MDXLayout","children","MDXContent","components","props","isMDXComponent"],"mappings":";;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AAEA;;AACA;;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAO,MAAMC,IAAI,GAAG;AAClBC,EAAAA,KAAK,EAAE,uBADW;AAElBC,EAAAA,WAAW,EAAE,kEAFK;AAGlBC,EAAAA,IAAI,EAAE,kBAHY;AAIlBC,EAAAA,QAAQ,EAAE;AAJQ,CAAb;AAOP,MAAMC,WAAW,GAAG;AAClBL,EAAAA;AADkB,CAApB;;AAGA,MAAMM,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB,IAAC,QAAD;AAAU,EAAA,IAAI,EAAEP,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAuBO,QAAvB,CAApC;;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAHgC;AACjCC,IAAAA;AADiC,GAGhC;AAAA,MADEC,KACF;;AACD,SAAO,IAAC,SAAD,eAAeL,WAAf,EAAgCK,KAAhC;AAAuC,IAAA,UAAU,EAAED,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,oQAAL,CAJK,EAKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,uLAAL,CALK,EAML,mBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEG;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACtB,mBAAe,MADO;AAEtB,gBAAY,CAAC,CAFS;AAGtB,YAAQ;AAHc,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIE;AAAM,IAAA,UAAU,EAAC;AAAjB,KAAyB;AACxB,iBAAa;AADW,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJF,CAFH,EAQoB,4BARpB,CANK,EAeL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,8IAAL,CAfK,EAgBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,iIAAtB,CADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,mIAAtB,CAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,iJAAtB,CAHF,EAIE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,8HAAtB,CAJF,CAhBK,EAsBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,8JAAL,EAAmK;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyB,UAAzB,CAAnK,EAAiN,4DAAjN,CAtBK,EAuBL,mBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEG;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACtB,mBAAe,MADO;AAEtB,gBAAY,CAAC,CAFS;AAGtB,YAAQ;AAHc,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIE;AAAM,IAAA,UAAU,EAAC;AAAjB,KAAyB;AACxB,iBAAa;AADW,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJF,CAFH,EAQoB,sBARpB,CAvBK,EAgCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,6RAAL,CAhCK,EAiCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,0IAAL,CAjCK,EAkCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,8EAAL,CAlCK,EAmCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,wCAAtB,CADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,yCAAtB,CAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,sEAAtB,CAHF,CAnCK,EAwCL,mBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEG;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACtB,mBAAe,MADO;AAEtB,gBAAY,CAAC,CAFS;AAGtB,YAAQ;AAHc,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIE;AAAM,IAAA,UAAU,EAAC;AAAjB,KAAyB;AACxB,iBAAa;AADW,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJF,CAFH,EAQoB,qBARpB,CAxCK,EAiDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,8PAAL,CAjDK,EAkDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,yDAAtB,CADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,qCAAtB,CAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,yCAAtB,CAHF,EAIE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,yEAAtB,CAJF,CAlDK,EAwDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,iXAAL,CAxDK,EAyDL,mBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEG;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACtB,mBAAe,MADO;AAEtB,gBAAY,CAAC,CAFS;AAGtB,YAAQ;AAHc,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIE;AAAM,IAAA,UAAU,EAAC;AAAjB,KAAyB;AACxB,iBAAa;AADW,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJF,CAFH,EAQoB,mBARpB,CAzDK,EAkEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,gMAAL,CAlEK,EAmEL,mBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEG;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACtB,mBAAe,MADO;AAEtB,gBAAY,CAAC,CAFS;AAGtB,YAAQ;AAHc,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIE;AAAM,IAAA,UAAU,EAAC;AAAjB,KAAyB;AACxB,iBAAa;AADW,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJF,CAFH,EAQoB,SARpB,CAnEK,EA4EL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,iFAAL,EAAsF;AAAG,IAAA,UAAU,EAAC;AAAd,KAAsB;AACxG,YAAQ;AADgG,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAE/E,sBAF+E,CAAtF,EAEmC,iDAFnC,CA5EK,EA+EL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,2CAAL,CA/EK,EAgFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,uDAAtB,CADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,kBAAtB,CAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,kCAAtB,CAHF,EAIE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,wBAAtB,CAJF,EAKE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,WAAtB,CALF,CAhFK,EAuFL,mBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEG;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACtB,mBAAe,MADO;AAEtB,gBAAY,CAAC,CAFS;AAGtB,YAAQ;AAHc,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIE;AAAM,IAAA,UAAU,EAAC;AAAjB,KAAyB;AACxB,iBAAa;AADW,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJF,CAFH,EAQoB,2BARpB,CAvFK,EAgGL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,wIAAL,EAA6I;AAAG,IAAA,UAAU,EAAC;AAAd,KAAsB;AAC/J,YAAQ;AADuJ,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEtI,iBAFsI,CAA7I,EAE8B,8GAF9B,CAhGK,EAmGL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,wGAAL,EAA6G;AAAG,IAAA,UAAU,EAAC;AAAd,KAAsB;AAC/H,YAAQ;AADuH,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEtG,WAFsG,CAA7G,EAEwB,kLAFxB,EAE0M;AAAG,IAAA,UAAU,EAAC;AAAd,KAAsB;AAC5N,YAAQ;AADoN,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEnM,4BAFmM,CAF1M,EAIyC,OAJzC,CAnGK,EAwGL,mBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEG;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACtB,mBAAe,MADO;AAEtB,gBAAY,CAAC,CAFS;AAGtB,YAAQ;AAHc,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIE;AAAM,IAAA,UAAU,EAAC;AAAjB,KAAyB;AACxB,iBAAa;AADW,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJF,CAFH,EAQoB,mBARpB,CAxGK,EAiHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,8KAAL,CAjHK,EAkHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8B,QAA9B,CAApB,EAAyE,gEAAzE,CADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8B,OAA9B,CAApB,EAAwE,uCAAxE,EAA+G;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8B,eAA9B,CAA/G,CAFF,CAlHK,EAsHL,mBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEG;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACtB,mBAAe,MADO;AAEtB,gBAAY,CAAC,CAFS;AAGtB,YAAQ;AAHc,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIE;AAAM,IAAA,UAAU,EAAC;AAAjB,KAAyB;AACxB,iBAAa;AADW,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJF,CAFH,EAQoB,uCARpB,CAtHK,EA+HL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,8BAAtB,EAAoD;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8B,YAA9B,CAApD,EAA6G,uMAA7G,CADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,8BAAtB,EAAoD;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8B,MAA9B,CAApD,EAAuG,kEAAvG,EAAyK;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8B,OAA9B,CAAzK,EAA6N,qHAA7N,CAFF,CA/HK,EAmIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,mCAAL,EAAwC;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyB,KAAzB,CAAxC,EAAiF,uKAAjF,CAnIK,EAoIL,mBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEG;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACtB,mBAAe,MADO;AAEtB,gBAAY,CAAC,CAFS;AAGtB,YAAQ;AAHc,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIE;AAAM,IAAA,UAAU,EAAC;AAAjB,KAAyB;AACxB,iBAAa;AADW,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJF,CAFH,EAQoB,oCARpB,CApIK,EA6IL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,mDAAL,EAAwD;AAAG,IAAA,UAAU,EAAC;AAAd,KAAsB;AAC1E,YAAQ;AADkE,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEjD,gBAFiD,CAAxD,EAE6B,+HAF7B,CA7IK,EAgJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,4DAAL,CAhJK,EAiJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,oOAAL,CAjJK,EAkJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,qFAAL,CAlJK,EAmJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,8LAAL,CAnJK,EAoJL,mBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEG;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACtB,mBAAe,MADO;AAEtB,gBAAY,CAAC,CAFS;AAGtB,YAAQ;AAHc,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIE;AAAM,IAAA,UAAU,EAAC;AAAjB,KAAyB;AACxB,iBAAa;AADW,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJF,CAFH,EAQoB,qBARpB,CApJK,EA6JL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,4IAAL,CA7JK,EA8JL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,kTAAL,CA9JK,EA+JL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,yNAAL,CA/JK,EAgKL,mBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEG;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACtB,mBAAe,MADO;AAEtB,gBAAY,CAAC,CAFS;AAGtB,YAAQ;AAHc,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIE;AAAM,IAAA,UAAU,EAAC;AAAjB,KAAyB;AACxB,iBAAa;AADW,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJF,CAFH,EAQoB,2BARpB,CAhKK,EAyKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,2EAAtB,CADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,0FAAtB,CAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,4GAAtB,CAHF,CAzKK,EA8KL,mBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEG;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACtB,mBAAe,MADO;AAEtB,gBAAY,CAAC,CAFS;AAGtB,YAAQ;AAHc,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIE;AAAM,IAAA,UAAU,EAAC;AAAjB,KAAyB;AACxB,iBAAa;AADW,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJF,CAFH,EAQoB,aARpB,CA9KK,EAuLL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,6IAAL,CAvLK,EAwLL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,sDAAL,CAxLK,CAAP;AA0LD;AAED;AACAD,UAAU,CAACG,cAAX,GAA4B,IAA5B","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport BlogPost from '../../../components/blogPost'\nexport const meta = {\n  title: \"It's okay to be wrong\",\n  description: 'How wrong decisions can lead to personal and professional growth',\n  date: 'January 11, 2021',\n  readTime: 5\n};\n\nconst layoutProps = {\n  meta\n};\nconst MDXLayout = ({ children }) => <BlogPost meta={meta}>{children}</BlogPost>\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`As kids, we're often punished for not knowing the right answers. Take a look at the SAT - if you answer a question incorrectly, you get more points off than simply not answering at all. Inaction is rewarded over a wrong action when trying to solve a problem.`}</p>\n    <p>{`This kind of negative reinforcement can carry over into adulthood where we feel like inaction is a safer option than trying something that could result in a less than ideal outcome.`}</p>\n    <h2 {...{\n      \"id\": \"working-with-your-partners\"\n    }}><a parentName=\"h2\" {...{\n        \"aria-hidden\": \"true\",\n        \"tabIndex\": -1,\n        \"href\": \"#working-with-your-partners\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"icon icon-link\"\n        }}></span></a>{`Working with your partners`}</h2>\n    <p>{`In the software industry, the risk of feeling wrong can result in dysfunctional teams and a lack of trust in our business partners, such as:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Developers not pushing back on design in case they are wrong about what \"good\" design is or don't have all the business context`}</li>\n      <li parentName=\"ul\">{`Designers not asking developers if a design is feasible because it could result in having to rework and already \"approved\" design`}</li>\n      <li parentName=\"ul\">{`Managers worried about not communicating out the right information from their team, which means asking the team to provide that data themselves`}</li>\n      <li parentName=\"ul\">{`QA not wanting to ask what they are testing against because they are worried about being wrong about the acceptance criteria`}</li>\n    </ul>\n    <p>{`We need to be asking ourselves: how can we encourage more collaboration and questions, no matter what role or level of experience? By feeling free to admit `}<strong parentName=\"p\">{`publicly`}</strong>{` when we're wrong, and more importantly... that it's okay.`}</p>\n    <h2 {...{\n      \"id\": \"growth-through-shame\"\n    }}><a parentName=\"h2\" {...{\n        \"aria-hidden\": \"true\",\n        \"tabIndex\": -1,\n        \"href\": \"#growth-through-shame\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"icon icon-link\"\n        }}></span></a>{`Growth through shame`}</h2>\n    <p>{`When we're wrong, we feel ashamed. Our natural instinct is to not repeat the same mistake. The easiest way to protect ourselves is to not even take the risk of being in that situation again. This avoidance tactic tends to backfire though, because the team ends up suffering over all.`}</p>\n    <p>{`If we can embrace being wrong though and working past our emotions, we can begin to start to see how we can grow from these experiences.`}</p>\n    <p>{`Then next time you feel shame through making a wrong decision, keep in mind:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Awareness of being wrong is a strength`}</li>\n      <li parentName=\"ul\">{`You don't learn from always being right`}</li>\n      <li parentName=\"ul\">{`Others will also be wrong, and now you have an opportunity to teach!`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"codedesign-reviews\"\n    }}><a parentName=\"h2\" {...{\n        \"aria-hidden\": \"true\",\n        \"tabIndex\": -1,\n        \"href\": \"#codedesign-reviews\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"icon icon-link\"\n        }}></span></a>{`Code/design reviews`}</h2>\n    <p>{`Providing a constructive review is typically the main way people learn that they didn't do something the right way. We tend to take for granted that \"best practices\" are widely known, but really it depends on how people learned. Consider the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A professor/bootcamp didn't cover this particular topic`}</li>\n      <li parentName=\"ul\">{`Best practices can evolve over time`}</li>\n      <li parentName=\"ul\">{`A previous company did it a certain way`}</li>\n      <li parentName=\"ul\">{`Someone that is self-taught hasn't stumbled across that scenario before`}</li>\n    </ul>\n    <p>{`When we take into consideration that not everyone has the same traditional \"101\" training, reviews are sometimes the first time someone realizes that their method was incorrect. Providing constructive feedback is not only helpful for the person receiving it, but if done publicly (like a GitHub or Figma comment), it can help others learn the lesson at the same time.`}</p>\n    <h2 {...{\n      \"id\": \"process--tooling\"\n    }}><a parentName=\"h2\" {...{\n        \"aria-hidden\": \"true\",\n        \"tabIndex\": -1,\n        \"href\": \"#process--tooling\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"icon icon-link\"\n        }}></span></a>{`Process & tooling`}</h2>\n    <p>{`Depending on the size of your team, sometimes code/design reviews can't be as thorough. That's okay! Teams can still self-improve and learn through following the right processes and tooling.`}</p>\n    <h3 {...{\n      \"id\": \"linting\"\n    }}><a parentName=\"h3\" {...{\n        \"aria-hidden\": \"true\",\n        \"tabIndex\": -1,\n        \"href\": \"#linting\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"icon icon-link\"\n        }}></span></a>{`Linting`}</h3>\n    <p>{`Linting is a great way to ensure that code follows consistent standards. I use `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/DavidAnson/vscode-markdownlint\"\n      }}>{`this markdown linter`}</a>{` to make sure my posts follow consistent rules.`}</p>\n    <p>{`It's also super conveninent to highlight:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`CSS standards in terms of white spacing, import order`}</li>\n      <li parentName=\"ul\">{`Unused variables`}</li>\n      <li parentName=\"ul\">{`Outdated concatenation practices`}</li>\n      <li parentName=\"ul\">{`Code formatting issues`}</li>\n      <li parentName=\"ul\">{`And more!`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"design-and-code-libraries\"\n    }}><a parentName=\"h3\" {...{\n        \"aria-hidden\": \"true\",\n        \"tabIndex\": -1,\n        \"href\": \"#design-and-code-libraries\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"icon icon-link\"\n        }}></span></a>{`Design and code libraries`}</h3>\n    <p>{`Design libraries are a great way to ensure that designs reflect their coded counterpart's limitations. Especially with Figma's newest `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.figma.com/best-practices/creating-and-organizing-variants/\"\n      }}>{`variant support`}</a>{`, it's super convenient for designers to understand what can be modified when referencing a given component.`}</p>\n    <p>{`In addition, designers and developers can also reference a coded library version using something like `}<a parentName=\"p\" {...{\n        \"href\": \"https://storybook.js.org/\"\n      }}>{`Storybook`}</a>{` to see how the coded component actually works. It's also a great tool for implementation documentation, understanding how the component changes in different environments, and `}<a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/@vasikarla.raj/storybook-for-native-d772654c7133\"\n      }}>{`works for native platforms`}</a>{` too!`}</p>\n    <h3 {...{\n      \"id\": \"reviews-in-github\"\n    }}><a parentName=\"h3\" {...{\n        \"aria-hidden\": \"true\",\n        \"tabIndex\": -1,\n        \"href\": \"#reviews-in-github\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"icon icon-link\"\n        }}></span></a>{`Reviews in GitHub`}</h3>\n    <p>{`The best way to review code, is in the same place the code is. When designers and developers are speaking the same language, it makes it much easier to understand feedback.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Before`}</inlineCode>{`: (Screenshot) THis button text is too dark, should be lighter`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`After`}</inlineCode>{`: (Line 224 comment) Change class to `}<inlineCode parentName=\"li\">{`text-gray-300`}</inlineCode></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"examples-of-clear-objective-feedback\"\n    }}><a parentName=\"h3\" {...{\n        \"aria-hidden\": \"true\",\n        \"tabIndex\": -1,\n        \"href\": \"#examples-of-clear-objective-feedback\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"icon icon-link\"\n        }}></span></a>{`Examples of clear, objective feedback`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`I noticed you used a lot of `}<inlineCode parentName=\"li\">{`!important`}</inlineCode>{`s in your CSS, but it's important we avoid these because they can cause issues with specificity between our spreadsheets. You can achieve the same type of behavior by using more specific selectors.`}</li>\n      <li parentName=\"ul\">{`I see that you're using the `}<inlineCode parentName=\"li\">{`tabs`}</inlineCode>{` pattern for navigation on this screen, but our experiences use `}<inlineCode parentName=\"li\">{`links`}</inlineCode>{` because they are semantically correct as the user is taken to a different page, versus the content updating below.`}</li>\n    </ul>\n    <p>{`Note that these examples explain `}<strong parentName=\"p\">{`why`}</strong>{` something is wrong, instead of just explaining what to fix. In doing so, you're not only providing guidance to help others, but also amping up your own credibility.`}</p>\n    <h2 {...{\n      \"id\": \"moving-forward-through-uncertainty\"\n    }}><a parentName=\"h2\" {...{\n        \"aria-hidden\": \"true\",\n        \"tabIndex\": -1,\n        \"href\": \"#moving-forward-through-uncertainty\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"icon icon-link\"\n        }}></span></a>{`Moving forward through uncertainty`}</h2>\n    <p>{`At Amazon, Jeff Bezos talks about the concept of `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.aboutamazon.com/news/company-news/2016-letter-to-shareholders\"\n      }}>{`Day 1 vs Day 2`}</a>{` companies. One of the main points that stood out is: not everyone needs to agree to move forward, but they can still commit.`}</p>\n    <p>{`Disagreement doesn't need to result in death (to an idea).`}</p>\n    <p>{`It's okay to move forward in a direction, even though you may think it's the wrong one. We don't learn unless we try. Whether the experiment is a success or a failure, you're left with a guaranteed reward for the effort: data.`}</p>\n    <p>{`And with that data, we can make informed decisions on what to experiment with next.`}</p>\n    <p>{`If we can agree to commit to solving the problem, versus having everyone on board with the solution, we can set aside our egos and embrace a more open-minded and customer-focused approach.`}</p>\n    <h2 {...{\n      \"id\": \"what-helped-me-grow\"\n    }}><a parentName=\"h2\" {...{\n        \"aria-hidden\": \"true\",\n        \"tabIndex\": -1,\n        \"href\": \"#what-helped-me-grow\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"icon icon-link\"\n        }}></span></a>{`What helped me grow`}</h2>\n    <p>{`It's easy to be dismissive of feedback when you think you're always right. What does this person know after all? Doesn't my solution work?`}</p>\n    <p>{`Just because something works, doesn't mean it can't be improved. This current website is an example of that - yes it technically functions, but there is so much I want to improve. Cleaner implementations, better crafted components. But how do I know there is even something to improve in the first place?`}</p>\n    <p>{`By being curious. Getting inspired by others. Exploring outside of my bubble and finding what others with different background have crafted. Diversity is so important, because we don't grow in our own echo chambers.`}</p>\n    <h3 {...{\n      \"id\": \"questions-i-typically-ask\"\n    }}><a parentName=\"h3\" {...{\n        \"aria-hidden\": \"true\",\n        \"tabIndex\": -1,\n        \"href\": \"#questions-i-typically-ask\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"icon icon-link\"\n        }}></span></a>{`Questions I typically ask`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`How did you know about this approach? (I learn about a new site/resource)`}</li>\n      <li parentName=\"ul\">{`What makes this method better than mine? (I learn about limitations and how things work)`}</li>\n      <li parentName=\"ul\">{`Since when was this a thing? (I learn if I'm just behind the times, or if I never knew the right approach)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"wrapping-up\"\n    }}><a parentName=\"h2\" {...{\n        \"aria-hidden\": \"true\",\n        \"tabIndex\": -1,\n        \"href\": \"#wrapping-up\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"icon icon-link\"\n        }}></span></a>{`Wrapping up`}</h2>\n    <p>{`When we start putting down our barriers and start taking constructive feedback as a gift, we can start to grow and learn from our mistakes.`}</p>\n    <p>{`What were you wrong about today? What did you learn?`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}